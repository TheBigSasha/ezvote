import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import Link from 'next/link'
import { useHostMultiPeerSession, useJoinMultiPeerSession } from '@thebigsasha/react-peerjs-hooks'
import { useState } from 'react'

const inter = Inter({ subsets: ['latin'] })


interface Voter {
    name: string
    vote?: string
}

interface Host {
    name: string
    question: string
    options: string[]
    showResults?: boolean
}

interface StateInterface {
    member: Voter | Host
}


export default function Host() {

    const [peerID, setPeerID] = useState('')

    const [peerStates, myState, setMyState, numConnections, error] = useJoinMultiPeerSession<StateInterface>(peerID, {member: {name: 'Voter'}})

    const hostState = peerStates.find((peerState) => peerState.data.member && (peerState.data.member as Host).question) || {data: {member: {name: 'Host', question: 'What is your favorite color?', options: ['Red', 'Blue', 'Green']}}, id: ''}

    const {name, question, options, showResults} = hostState?.data.member as Host 

    const votes: {[key: string]: number} = {}

    for (const peerState of peerStates) {
        const {vote} = peerState.data.member as Voter
        if (vote) {
            votes[vote] = (votes[vote] || 0) + 1
        }
    }

    if(myState.member && (myState.member as Voter).vote) {
        votes[(myState.member as Voter).vote || ''] = (votes[(myState.member as Voter).vote || ''] || 0) + 1
    }


  return (
    <>
      <Head>
        <title>Host a Poll</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
            <label htmlFor="peerID">Peer ID</label>
            <input type="text" id="peerID" value={peerID} onChange={(e) => setPeerID(e.target.value)} />
     
        </div>

        <p>
            {name} is hosting a poll!
            </p>

            <strong>{question}</strong>
            <ul>
                {options.map((option) => {
                    if(!votes[option])
                        votes[option] = 0

                        const results = showResults ? `(${votes[option]})` : ''

                    if(myState.member && (myState.member as Voter).vote === option
                    )
                        return <li key={option}>{option} {results} <strong>VOTED</strong></li>

                    return <li key={option}>{option} {results}
                     <button onClick={() => {
                        setMyState({member: {name: 'Voter', vote: option}})
                    }
                    }
                    >Vote</button></li>
                })}
            </ul>


            
        <div className={styles.center}>
           
        </div>

        <div className={styles.grid}>
          <Link
            href="/host"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Host <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Host a live poll and invite your friends to vote!
            </p>
          </Link>

          <Link
            href="/join"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Join <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Join a poll and vote on your favorite options!
            </p>
          </Link>

          <a
            href="https://github.com/TheBigSasha/react-peerjs-hooks"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              View Source <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              See how this app was built using TypeScript, React.JS, and PeerJS
            </p>
          </a>

          <Link
            href="/learn-more"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={inter.className}>
              Learn More <span>-&gt;</span>
            </h2>
            <p className={inter.className}>
              Learn about how to use EzVote and how to host your own polls!
            </p>
          </Link>
        </div>
      </main>
    </>
  )
}
